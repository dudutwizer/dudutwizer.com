[{"content":"Code sample published in aws-samples/shuffle-sharding-demo-app .\nIn this session, you will learn how to apply the Reliability Pillar from the AWS Well-Architected Framework to your workloads. We will dive into modern architectural techniques and best practices like shuffle sharding and cell-based architecture. We will provide practical implementations with a short demo and reference architecture diagrams.\n","permalink":"https://dudutwizer.com/videos/minimize-the-blast-radius-of-your-applications/","summary":"Code sample published in aws-samples/shuffle-sharding-demo-app .\nIn this session, you will learn how to apply the Reliability Pillar from the AWS Well-Architected Framework to your workloads. We will dive into modern architectural techniques and best practices like shuffle sharding and cell-based architecture. We will provide practical implementations with a short demo and reference architecture diagrams.","title":"Minimize the blast radius of your applications"},{"content":" cdklabs/cdk-skylight Overview CDK Skylight is a set of Level 3 constructs for the Microsoft products on AWS ecosystem (Windows OS, SQL Server, Active Directory, Windows Containers, Amazon FSx for Windows, and so on). CDK Skylight Constructs are a natural fit for Platform Teams building Platform as a Product.\nExamples\nWindows Worker with Domain join and Powershell API that allows running complex automation with a single line of code Managed Active Directory configured with DNS Topology and an API to create new AD Group with a domain-joined machine. Amazon FSx library that creates Filesystem with API to create Folder on it Windows EKS Workers that joins to specified AD domain with APIs to create and configure complex integrations such as SMB with Global Mapping and Domain authentication with gMSA plugin. All those examples are built with CDK Skylight libraries and can be used separately with maximum flexibility to change the default settings.\nCDK Skylight is set to address repetitive tasks and best practices involved with managing, deploying, and integrating those apps. In addition to the complexity of integrating the AWS side products, Microsoft technologies such as SQL, AD, Windows OS require OS-level integration and optimization. Skylight help in both the \u0026ldquo;AWS-side\u0026rdquo; and the \u0026ldquo;OS-side,\u0026rdquo; offering a complete end-to-end configuration and integration solution of AWS products.\nWho should use CDK Skylight? The primary persona to use CDK Skylight is the platform team owners to customize the stacks and provide them to the application owners teams.\nAs a vision, Project CDK-Skylight targets all Windows EC2 customers in all stages, specifically developers developing features integrated with the Microsoft-products ecosystem (SQL Server, Active Directory, Windows OS, etc.)\nWhen to use CDK Skylight? CDK Skylight helps in all application lifecycle stages, starting from the developer machine to running production workloads. With CDK Skylight, the time it takes to move between stages and integrate new services is reduced dramatically.\nHow to use Installation npm install cdk-skylight In your CDK App\nimport * as skylight from \u0026#34;cdk-skylight\u0026#34;; new skylight.authentication.AwsManagedMicrosoftAd(scope: Construct, id: string, props: IAwsManagedMicrosoftAdProps) CDK Skylight Constructs Skylight-Compute Library of Custom Compute components\nDomainWindowsNode A Domain Windows Node Construct represents one Windows EC2 instance configured with Active Directory.\nThe DomainWindowsNode can be customized to different instance sizes and additional permissions set just like any other EC2 Instance. You can use this construct to run elevated domain tasks with domain permissions or run your application in a single instance setup.\nThe machine will be joined to the provided Active Directory domain using a custom CloudFormation bootstrap that will wait until the required reboot to join the domain. Then it will register the machine in SSM and pull tasks from the SSM State manager.\nYou can send tasks to that machine using the provided methods: runPsCommands() and runPSwithDomainAdmin()\nconst windowsNodeObject = new skylight.compute.DomainWindowsNode( stack, \u0026#39;WindowsNode\u0026#39;, { vpc: vpc, madSsmParameters: {}, //pointer to the Secret that holds the Domain Admin username and password } ); // Special Methods: windowsNodeObject.runPsCommands([\u0026#39;echo hello-world\u0026#39;], \u0026#39;hello\u0026#39;); windowsNodeObject.runPSwithDomainAdmin( [\u0026#39;Write-Host hello-world\u0026#39;], \u0026#39;hello-withPS\u0026#39; ); windowsNodeObject.openRDP(\u0026#39;1.1.1.1/32\u0026#39;); Skylight-Authentication Library of Custom Authentication components\nAwsManagedMicrosoftAd - Managed Active Directory with R53 Resolvers A Ad Authentication represents an integration pattern of Managed AD and Route 53 Resolver in a specific VPC, it will create Managed AD with the provided Secret (Secrets Manager) or generates a new Secret.\nThe secret saved to SSM parameter store so others can use it with other Constructs (Such as Windows node or FSx) The provided VPC or the new created VPC will be configured to forward DNS requests to the Managed AD with Route53 Resolvers\nThe construct also creates (optionally) t3.nano machine that is part of the domain that can be used to run admin-tasks (such as createADGroup) The createADGroup() method creates an Active Directory permission group in the domain, using the domain admin user.\nPlease note: When calling createADGroup() API, a Lambda will be created to start the worker machine (Using AWS-SDK), then each command will be scheduled with State Manager, and the instance will be shut down after complete.\nExample:\nconst ad = new skylight.authentication.AwsManagedMicrosoftAd( stack, \u0026#39;AwsManagedMicrosoftAd\u0026#39;, { vpc: vpc, edition: \u0026#39;enterprise\u0026#39;, // Optional secret: new Secret(stack, \u0026#39;test-secret\u0026#39;), // Optional domainName: \u0026#39;test-domain\u0026#39;, // Optional secretName: \u0026#39;custom-secret-name\u0026#39;, // Optional createWorker: false, // Optional } ); ad.managedActiveDirectory.createADGroup( \u0026#39;MyADGroup\u0026#39;, // AD group name \u0026#39;My AD Group Created by CDK-Skylight!\u0026#39; //AD Description ); Skylight-Storage FSxWindows A FSxWindows represents an integration pattern of Amazon FSx and Managed AD in a specific VPC. The Construct creates Amazon FSx for Windows\nThe construct also creates t3.nano machine that is part of the domain that can be used to run admin-tasks (such as createFolder) The createFolder() method creates an SMB Folder in the FSx filesystem, using the domain admin user.\nPlease note: When calling createFolder() API, a Lambda will be created to start the worker machine (Using AWS-SDK), then each command will be scheduled with State Manager, and the instance will be shut down after complete.\nExample:\nthis.fsxWindows = new skylight.storage.FSxWindows(this, \u0026#39;FSx\u0026#39;, { vpc: vpc, adParametersStore: adParametersStore, }); this.fsxWindows.createFolder(\u0026#39;myFolderStorageOnFSx\u0026#39;); Very experimental Libraries EKS Compute The stack creates the Windows Autoscaling group with domain join script and the SSM Documents for gMSA and Global Mapping.\nEKS Cluster const cluster = new WindowsEKSCluster(stack, \u0026#39;ElasticCluster\u0026#39;, { vpc: new aws_ec2.Vpc(stack, \u0026#39;MyVpc\u0026#39;, {}), }); // Creates EKS Cluster with Windows support EKS Nodes This stack takes the PersistentStorage stack as input and creates the EKS cluster with permissions to operate EKS clusters.\nconst myNodes = new WindowsEKSNodes(stack, \u0026#39;WindowsEKSNodes\u0026#39;, { // Creates AutoScaling group for Windows Support vpc: new aws_ec2.Vpc(stack, \u0026#39;MyVpc\u0026#39;, {}), }); myNodes.addAdDependency(secretObject); myNodes.addStorageDependency(secretObject, storageMount); myNodes.addEKSDependency(eks_cluster.eksCluster); myNodes.addLocalCredFile(secretObject, \u0026#39;myEKSNodes\u0026#39;, \u0026#39;myWebApp\u0026#39;); ","permalink":"https://dudutwizer.com/opensource/cdk-skylight/","summary":"cdklabs/cdk-skylight Overview CDK Skylight is a set of Level 3 constructs for the Microsoft products on AWS ecosystem (Windows OS, SQL Server, Active Directory, Windows Containers, Amazon FSx for Windows, and so on). CDK Skylight Constructs are a natural fit for Platform Teams building Platform as a Product.\nExamples\nWindows Worker with Domain join and Powershell API that allows running complex automation with a single line of code Managed Active Directory configured with DNS Topology and an API to create new AD Group with a domain-joined machine.","title":"Cdk Skylight"},{"content":" aws-samples/windows-on-aws-samples Workshop link : Workshop Studio Discover and participate in AWS workshops and GameDays This workshop presents a new way to design your application using the Well-Architected Reliability Pillar. You will get exposure to implementing advanced and modern techniques like Shuffle Sharding, Horizontal Scaling for windows workloads, and infrastructure as code using the Cloud Development Kit (CDK).\nIn modern design techniques, Chaos Engineering taught us how to design for failure. Each architecture is designed using multiple AWS services, and each service has its own SLA. In this workshop, you will learn how to evaluate each AWS services SLA and combine them to ensure your architecture will meet the availability requirements for your business using the Cloud 9 IDE.\nThe code samples in this workshop have been published to the AWS-Samples GitHub Repo for future reference\nThis is a 200-300 level workshop suitable for infrastructure, developers, and operations engineers that have experience deploying and maintaining Windows Workloads.\nIn this 2 hour workshop, you will learn Infrastructure-as-Code and design principles that allow you to reliably deploy your Microsoft workload using CDK(Cloud Development Kit) along with CloudWatch (monitoring) and Auto Scaling to improve the reliability and availability of your application.\nLearning Objectives Understand the concepts and best practice implementation patterns of autoscaling and shuffle sharding to reduce the blast radius Understand the Five Design Principles of the Reliability Pillar to improve the overall reliability of your applications (Uptime) Be familiar with The Well Architect Reliability Pillar to increase your application availability Monitoring techniques with CloudWatch Dashboards ","permalink":"https://dudutwizer.com/workshops/architect-reliable-applications-on-aws/","summary":"aws-samples/windows-on-aws-samples Workshop link : Workshop Studio Discover and participate in AWS workshops and GameDays This workshop presents a new way to design your application using the Well-Architected Reliability Pillar. You will get exposure to implementing advanced and modern techniques like Shuffle Sharding, Horizontal Scaling for windows workloads, and infrastructure as code using the Cloud Development Kit (CDK).\nIn modern design techniques, Chaos Engineering taught us how to design for failure.","title":"Architect Reliable Applications on Aws"},{"content":"Many customers ask for our advice on choosing the ‘best’ or the ‘right’ storage and instance configuration, but there is no one solution that fits all circumstances. This blog post covers the critical techniques to right-size your workloads. We focus on right-sizing a SQL Server as our example workload, but the techniques we will demonstrate apply equally to any Amazon EC2 instance running any operating system or workload.\nWe create and use an Amazon CloudWatch dashboard to highlight any limits and bottlenecks within our example instance. Using our dashboard, we can ensure that we are using the right instance type and size, and the right storage volume configuration. The dimensions we look into are EC2 Network throughput, Amazon EBS throughput and IOPS, and the relationship between instance size and Amazon EBS performance.\nHow to use the Python script? # Download the script locally wget -L https://raw.githubusercontent.com/aws-samples/amazon-ec2-mssql-workshop/master/resources/code/Monitoring/create-cw-dashboard.py # Prerequisites (venv and boto3) python3 -m venv env # Optional source env/bin/activate # Optional pip3 install boto3 # Required # Execute python3 create-cw-dashboard.py --InstanceList i-example1 i-example2 --region eu-west-1 The complete guide Optimizing EC2 Workloads With Amazon CloudWatch | Amazon Web Services This post is written by David (Dudu) Twizer, Principal Solutions Architect, and Andy Ward, Senior AWS Solutions Architect – Microsoft Tech. In December 2020, AWS announced the availability of gp3, the next-generation General Purpose SSD volumes for Amazon Elastic Block Store (Amazon EBS), which allo… continue reading on AWS Blog ","permalink":"https://dudutwizer.com/blogs/optimize-ec2-workloads-with-cloudwatch/","summary":"Many customers ask for our advice on choosing the ‘best’ or the ‘right’ storage and instance configuration, but there is no one solution that fits all circumstances. This blog post covers the critical techniques to right-size your workloads. We focus on right-sizing a SQL Server as our example workload, but the techniques we will demonstrate apply equally to any Amazon EC2 instance running any operating system or workload.\nWe create and use an Amazon CloudWatch dashboard to highlight any limits and bottlenecks within our example instance.","title":"Optimizing EC2 Workloads with Amazon CloudWatch"},{"content":"In this webinar we will learn and discuss different SQL deployments and why preferred option for high availability deployments has traditionally been difficult to deploy and manage.\nDuring the webinar, we will walk you through a Demo on how to deploy and configure Windows fail over cluster using Amazon FSx for windows to achieve a simple architecture and reduce operational overhead and licensing costs.\n","permalink":"https://dudutwizer.com/videos/how-to-run-sql-on-fsx-webinar/","summary":"In this webinar we will learn and discuss different SQL deployments and why preferred option for high availability deployments has traditionally been difficult to deploy and manage.\nDuring the webinar, we will walk you through a Demo on how to deploy and configure Windows fail over cluster using Amazon FSx for windows to achieve a simple architecture and reduce operational overhead and licensing costs.","title":"Reduce complexity \u0026 cost for Microsoft SQL with Amazon FSx for Windows (Hebrew)"},{"content":"With Amazon FSx, you get fully managed shared file storage that automatically replicates the storage synchronously across two Availability Zones. Moreover, Amazon FSx provides high availability with automatic failure detection, failover, and failback. The service also fully supports the SMB Continuous Availability (CA) feature required to support SQL Server Always On FCI deployments.\nFor those of you who chose to deploy SQL AG with Enterprise Edition licenses, to avoid the complexity and cost of using FCI with shared storage, now you can use Standard Edition licenses. This will save you 50–60% in license costs. It will also simplify the overall complexity of your SQL deployment and ongoing management (like not needing to replicate system database objects across all replicas, which you must do in AG deployments).\nSee the complete blogpost here:\nSimplify Your Microsoft SQL Server High Availability Deployments Using Amazon FSx for Windows File Server | Amazon Web Services Customers have been running their Windows workloads on AWS for over a decade. Running business-critical applications often requires Microsoft SQL Server databases to be highly available. The high availability requirement demands that there are no single points of failure in the SQL Server deployment… continue reading on AWS Blog ","permalink":"https://dudutwizer.com/blogs/sql-on-fsx/","summary":"With Amazon FSx, you get fully managed shared file storage that automatically replicates the storage synchronously across two Availability Zones. Moreover, Amazon FSx provides high availability with automatic failure detection, failover, and failback. The service also fully supports the SMB Continuous Availability (CA) feature required to support SQL Server Always On FCI deployments.\nFor those of you who chose to deploy SQL AG with Enterprise Edition licenses, to avoid the complexity and cost of using FCI with shared storage, now you can use Standard Edition licenses.","title":"Running SQL Server with Amazon FSx as a shared storage"},{"content":"So, you have workloads running on premises and you wish to extend to the Cloud? You are not that different! Let\u0026rsquo;s discuss few of your options for running in a hybrid mode. How to connect the two in a secure manner? Which services you should utilize? what you can also use on premises?\n","permalink":"https://dudutwizer.com/videos/blur-the-boundaries-between-your-on-premises-to-aws-cloud/","summary":"So, you have workloads running on premises and you wish to extend to the Cloud? You are not that different! Let\u0026rsquo;s discuss few of your options for running in a hybrid mode. How to connect the two in a secure manner? Which services you should utilize? what you can also use on premises?","title":"Blur the Boundaries between Your on-Premises to AWS Cloud"}]